// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

float4x4 _WorldToLastFrameProj;
float4x4 _WorldToLastFrame;
float4x4 _CameraInverseProjection;
float4x4 _LastFrameToWorld;

SamplerState MyLinearClampSampler;
Texture2D<float4> _LastFrameConverged;
Texture2D<float4> _ConfidenceConvergedLastFrame;

RWTexture2D<float4> _ThisFrame;
RWTexture2D<float4> _ThisFrameDepth;
float4x4 _ThisFrameToWorld;

RWTexture2D<float4> _Result;
RWTexture2D<float4> _ResultConfidence;

float _Sample;

float3 deproject(float2 uv, float4x4 frameToWorld, float depth) {

    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = normalize(direction);
    float3 origin = mul(frameToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    direction = mul(frameToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return origin + direction * depth;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    _ThisFrame.GetDimensions(width, height);
    float2 uv = float2((float2(id.xy) + 0.5) / float2(width, height) * 2.0f - 1.0f);
    //float2 uv = float2(id.xy) / float2(width, height);

    float4 thisFrame = _ThisFrame.Load(id.xy);

    // Project this depth into world
    float depth = thisFrame.a;

    float3 worldPos = deproject(uv, _ThisFrameToWorld, depth);

    // project worldpos into last frame (converged result)
    float4 clip = mul(_WorldToLastFrameProj, float4(worldPos, 1));

    float2 lastUV = (0.5 + 0.5 * (clip.xy / clip.w));

    float4 lastFrame = _LastFrameConverged.SampleLevel(MyLinearClampSampler, lastUV, 0);

    float lastFrameDepth = lastFrame.a;
    float3 origin = mul(_LastFrameToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float calculatedDepth = length(worldPos - origin);

    float distance = length(lastFrameDepth - calculatedDepth);

    float confidence = _ConfidenceConvergedLastFrame.SampleLevel(MyLinearClampSampler, lastUV, 0).r;

   // float3 lastFrameworldPos = mul(_WorldToThisFrame, float4(worldPos, 1)).z;
    // float depthDiff = abs(lastFrameDepthComputed - depth);

    // confidence += (0.01f / 1.0f + depthDiff);

   // check if edge
    int rad = 2;
    float upDepth = _ThisFrame.Load(id.xy + int2(0, rad)).a;
    float leftDepth = _ThisFrame.Load(id.xy + int2(rad, 0)).a;
    float downDepth = _ThisFrame.Load(id.xy + int2(0, -rad)).a;
    float rightDepth = _ThisFrame.Load(id.xy + int2(-rad, 0)).a;
    float nighborDepthDiff =
        (depth - upDepth) * (depth - upDepth) +
        (depth - leftDepth) * (depth - leftDepth) +
        (depth - downDepth) * (depth - downDepth) +
        (depth - rightDepth) * (depth - rightDepth);
  
    
                                                                  
    // could this be real ? ? ???
    // float a = 1 / (1 + exp(-20 * distance + 2));
//    confidence *= 1.0/(distance + 0.001);
    if (distance < 0.005 ) {
        confidence += 1;
    } else if (distance > 0.005) {
        confidence *= 0.2;

    }

    if ( lastUV.x < 0 || lastUV.y < 0|| lastUV.x > 1 || lastUV.y > 1 || depth > 100) { 
        confidence = 1;
    }

    float3 newColor = ( 1.0/confidence) * thisFrame.rgb + (1.0 - 1.0/confidence) * lastFrame.rgb;
    //_Result[id.xy] = float4(saturate(newColor), confidence);
    _Result[id.xy] = float4(saturate(newColor), depth);

   
    _ResultConfidence[id.xy] = float4(confidence, 0, 0, 0);

}
